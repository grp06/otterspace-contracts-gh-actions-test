#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# check for changes to files in /src directory
git diff --quiet --name-only HEAD -- src

if [ $? -eq 0 ]
then
  echo "No changes were detected in the /src directory. Exiting script."
  exit 0
fi

# compile contracts and generate new ABIs
npx hardhat compile

# create backup of test/abis/latest
cp -R test/abis/latest test/abis/backup

# copy artifacts over to test/abis/latest
cp artifacts/src/Badges.sol/Badges.json test/abis/latest/Badges.json
cp artifacts/src/Raft.sol/Raft.json test/abis/latest/Raft.json
cp artifacts/src/SpecDataHolder.sol/SpecDataHolder.json test/abis/latest/SpecDataHolder.json

# run test the latest changes to make sure they don't break upgradeability
npx hardhat testUpgrade

# check if there were any errors
if [ $? -ne 0 ]
then
    # if there were errors
    # remove the contents of test/abis/latest (that we just copied above)
    rm -rf test/abis/latest
    # restore the scripts as they were before
    cp -R test/abis/backup test/abis/latest
    # remove the backup directory
    rm -rf test/abis/backup
    
    echo "Errors were detected during testUpgrade. Aborting commit."
    exit 1
else
    # if testUpgrade passed
    # forge build to generate /out files
    npm run build

    # check for changes in the /out directory
    git diff --quiet --name-only HEAD -- out

    # check the return code of the git diff command
    if [ $? -eq 0 ]
    then
      # if there were no changes, exit the script
      echo "No changes were detected in the /out directory. Exiting script."
      exit 0
    fi

    ## if there were changes in the /out directory
    # add only changed files in the /out directory to the commit
    git add --update out/

    # add the hardhat ABIs we generated above to the commit
    git add -A test/abis/latest
    
    # remove backup
    rm -rf test/abis/backup
fi

